/*
 * File: app/view/ListAllBankAccountsForCountryGrid.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.view.ListAllBankAccountsForCountryGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.listallbankaccountsforcountrygrid',

    requires: [
        'Ext.grid.RowNumberer',
        'Ext.grid.View',
        'Ext.grid.column.Boolean',
        'Ext.grid.column.Date'
    ],

    height: 250,
    width: 400,
    store: 'BankerForCountries',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'rownumberer',
                    width: 50,
                    dataIndex: 'string',
                    text: 'S/n'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var accountnumberStore = Ext.getStore('Bankers');
                        var account = accountnumberStore.findRecord('id', value);
                        return account!== null ? account.get('account_number'): value;
                    },
                    width: 200,
                    dataIndex: 'bank_id',
                    text: 'Account Number'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var accountnameStore = Ext.getStore('Bankers');
                        var account = accountnameStore.findRecord('id', value);
                        return account!== null ? account.get('account_name'): value;
                    },
                    width: 200,
                    dataIndex: 'bank_id',
                    text: 'Account Name'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var banknameStore = Ext.getStore('Bankers');
                        var bank = banknameStore.findRecord('id', value);
                        return bank!== null ? bank.get('bank_name'): value;
                    },
                    width: 200,
                    dataIndex: 'bank_id',
                    text: 'Bank Name'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var countryStore = Ext.getStore('Countries');
                        var country = countryStore.findRecord('id', value);
                        return country!== null ? country.get('name'): value;
                    },
                    width: 200,
                    dataIndex: 'country_id',
                    text: 'Country'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'status',
                    text: 'Account Status'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'payment_mode',
                    text: 'Payment Mode'
                },
                {
                    xtype: 'booleancolumn',
                    width: 200,
                    dataIndex: 'approved',
                    text: 'Approved?'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('PlatformUsers');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 200,
                    dataIndex: 'initiator_create_user_id',
                    text: 'Initiated By'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('PlatformUsers');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 200,
                    dataIndex: 'approved_user_id',
                    text: 'Approved User'
                },
                {
                    xtype: 'datecolumn',
                    width: 200,
                    dataIndex: 'approved_time',
                    text: 'Date Approved',
                    format: 'd/m/Y H:i:s'
                },
                {
                    xtype: 'datecolumn',
                    width: 200,
                    dataIndex: 'initiator_create_time',
                    text: 'Date Initiated',
                    format: 'd/m/Y H:i:s'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('PlatformUsers');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 200,
                    dataIndex: 'initiator_update_user_id',
                    text: 'Updated By'
                },
                {
                    xtype: 'datecolumn',
                    width: 200,
                    dataIndex: 'initiator_update_time',
                    text: 'Date Updated',
                    format: 'd/m/Y H:i:s'
                }
            ]
        });

        me.callParent(arguments);
    }

});