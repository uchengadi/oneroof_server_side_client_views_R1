/*
 * File: app/view/FailPaymentGridpanel.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cobuy.view.FailPaymentGridpanel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.failpaymentgridpanel',

    requires: [
        'Ext.grid.RowNumberer',
        'Ext.grid.column.Number',
        'Ext.grid.column.Date',
        'Ext.grid.View'
    ],

    height: 250,
    width: 400,
    store: 'FailedPayments',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'rownumberer',
                    width: 50,
                    dataIndex: 'string',
                    text: 'S/n'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'status',
                    text: 'Payment Status'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'delivery_type',
                    text: 'Delivery Type'
                },
                {
                    xtype: 'gridcolumn',
                    width: 300,
                    dataIndex: 'invoice_number',
                    text: 'Invoice Number'
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'payment_mode',
                    text: 'Payment Mode'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var orders = Ext.getStore('Orders');
                        var thisorder = orders.findRecord('id', value);
                        return thisorder!== null ? thisorder.get('order_number'): value;

                    },
                    width: 200,
                    dataIndex: 'order_id',
                    text: 'Order Number'
                },
                {
                    xtype: 'numbercolumn',
                    width: 300,
                    dataIndex: 'revenue',
                    text: 'Revenue(=N=)'
                },
                {
                    xtype: 'numbercolumn',
                    width: 300,
                    dataIndex: 'gross_amount',
                    text: 'Amount(=N=)'
                },
                {
                    xtype: 'numbercolumn',
                    width: 300,
                    dataIndex: 'delivery_charges',
                    text: 'Delivery Charges(=N=)'
                },
                {
                    xtype: 'numbercolumn',
                    width: 300,
                    dataIndex: 'vat',
                    text: 'Vat(=N=)'
                },
                {
                    xtype: 'datecolumn',
                    width: 300,
                    dataIndex: 'payment_date',
                    text: 'Payment Date'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        var userStore = Ext.getStore('AllMembers');
                        var user = userStore.findRecord('id', value);
                        if(user.get('middlename') === null || user.get('middlename') === undefined){
                            var name = user.get('firstname') + " " + user.get('lastname');
                        }else{
                            var name = user.get('firstname') + " " + user.get('middlename') + " " + user.get('lastname');
                        }

                        return user!== null ? name: value;
                    },
                    width: 300,
                    dataIndex: 'paid_by',
                    text: 'Paid By'
                }
            ]
        });

        me.callParent(arguments);
    }

});